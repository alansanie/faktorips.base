«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::template»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmptbuilder::template»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE main FOR XProductCmptClass-»
	«FILE getFileName(BuilderAspect::IMPLEMENTATION) -»
	package «getPackageName(BuilderAspect::IMPLEMENTATION)»;

		«EXPAND CommonDefinitions::ImportBlock FOREACH context.imports ONFILECLOSE»
	
		/**
		«IF generatePublishedInterfaces-»
		 * «localizedJDoc("CLASS", interfaceName)»
		«ELSE-»
		 * «localizedJDocOrDescription("CLASS_NO_INTERFACE", name, description)»
		«ENDIF-»
		 * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
		 * @generated
		 */
		«getAnnotations(AnnotatedJavaElementType::PRODUCT_CMPT_IMPL_CLASS)-»
		«getAnnotationsForPublishedInterface(AnnotatedJavaElementType::PRODUCT_CMPT_DECL_CLASS, genInterface())-»
		public «abstract()» class «implClassName» extends «superclassName-» «EXPAND CommonDefinitions::implementedInterfaces-»
		 {
		 
			«EXPAND ProductAssociation::privateConstants FOREACH associations-»
		 
		 	«FOREACH attributes AS this-»
		 		«IF !generatePublishedInterfaces || !published -»
			 		«EXPAND ProductAttribute::constantForPropertyName-»
			 	«ENDIF-»
		 	«ENDFOREACH-»
		 
			«EXPAND ProductAttribute::memberField FOREACH attributes-»
			
			«EXPAND DefaultAndAllowedValues::defaultAndAllowedValuesFields FOREACH configuredAttributes-»
			
			«EXPAND ProductAssociation::field FOREACH associations-»
			
			«EXPAND TableUsages::propertyField FOREACH tables-»
			
			«EXPAND TableUsages::memberField FOREACH tables-»

		    /**
		     * «localizedJDoc("CONSTRUCTOR", implClassName)»
		     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
		     * @generated
		     */
			public «method(implClassName, IRuntimeRepository(), "repository", "String", "id", "String", "kindId", "String", "versionId")» {
		        super(repository, id, kindId, versionId);
		        «EXPAND ProductAttribute::setDefaultValue FOREACH attributesInclOverwritten-»
			}
			
            «IF generateGenerationAccessMethods»
			    «EXPAND getProductComponentGeneration FOR productCmptGenerationNode-»
		    «ENDIF-»
		    
		    «IF generateIsChangingOverTimeAccessMethod-»
			    /**
		     	 * «inheritDoc()»
		     	 * 
		     	 * @generated
		     	 */
			    @Override
				public boolean «isChangingOverTime()» {
					return «changingOverTime»;
				}
			«ENDIF-»
			
			«FOREACH attributesInclOverwritten AS this-»
				«IF generateAbstractGetter-»
					«EXPAND ProductAttribute::abstractGetter-»
				«ENDIF»
			«ENDFOREACH»
		   
			«EXPAND ProductAttribute::getterSetter FOREACH attributes»
			
			«EXPAND DefaultAndAllowedValues::getter FOREACH configuredAttributes-»
			
			«EXPAND ProductAssociation::getterSetterAdder FOREACH associations»
			
			«EXPAND TableUsages::getterAndSetter FOREACH tables»
			
			«EXPAND DerivedUnionAssociation::methodsForDerivedUnion(this) FOREACH subsettedDerivedUnions»

			«FOREACH methods AS this-»
				«IF !changingOverTime-»
					«IF !formulaSignature-»
						«EXPAND Methods::method-»
					«ELSE-»
						«EXPAND Methods::formulaMethod-»
					«ENDIF-»
				«ENDIF-»
			«ENDFOREACH-»
			
	    	/**
	     	 * «inheritDoc()»
	     	 * 
	     	 * @generated
	     	 */
	    	@Override
	    	protected void «doInitPropertiesFromXml(Map("String", Element()) + " configMap")» {
	        	super.«doInitPropertiesFromXml("configMap")»;
	        	«EXPAND ProductAttribute::initFromXmlMethodCall FOREACH attributes-»
	        	«EXPAND DefaultAndAllowedValues::initFromXmlMethodCall FOREACH configuredAttributes-»
	    	}

        	«EXPAND ProductAttribute::initFromXmlMethod FOREACH attributes-»
        	«EXPAND DefaultAndAllowedValues::initFromXmlMethod FOREACH configuredAttributes-»
		    
			«IF containsNotDerivedOrConstrainingAssociations-»
			    /**
			     * @generated
			     */
	    		@Override
			    protected void «doInitReferencesFromXml(Map("String", List_(Element())) + " elementsMap")» {
			        super.«doInitReferencesFromXml("elementsMap")»;
			        «EXPAND ProductAssociation::doInitFromXmlMethodCall FOREACH associations-»
			    }
			«ENDIF»

			«EXPAND ProductAssociation::doInitFromXmlMethod FOREACH associations-»
			
			
			«IF containsTables-»
			    /**
			     * @generated
			     */
			    @Override
			    protected void «doInitTableUsagesFromXml(Map("String", Element()) + " tableUsageMap")» {
			        super.«doInitTableUsagesFromXml("tableUsageMap")»;
			        «EXPAND TableUsages::doInitFromXmlMethodCall FOREACH tables-»
			    }
			«ENDIF»
			
			«EXPAND TableUsages::doInitFromXmlMethod FOREACH tables-»
			
			«EXPAND ProductCommons::writeToXmlMethods-»

			«EXPAND createPolicyCmpt(this) FOREACH policyTypeClassHierarchy»

			«IF generateMethodGenericCreatePolicyComponent»
			    /**
			     * «inheritDoc()»
			     * 
			     * @generated
			     */
	    		@Override
			    public «policyInterfaceName» «createPolicyComponent()» {
			    	«IF !configurationForPolicyCmptType-»
			    		return null;
			    	«ELSE-»
			        	return «policyCmptClass.methodNameCreatePolicyCmpt»();
			        «ENDIF-»
			    }
		    «ENDIF»
		    
		    «IF associations.size > 0-»
				«EXPAND ProductAssociation::getLinkMethods»
			«ENDIF-»
			
			«IF generateProductBuilder && !abstract-»
				«EXPAND ProductCmptCreateBuilder::builder FOR productBuilderModelNode-»
				«IF !generatePublishedInterfaces-»
					«EXPAND ProductCmptCreateBuilder::with(true) FOR productBuilderModelNode-»
				«ENDIF-»
			«ENDIF-»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE getProductComponentGeneration FOR XProductCmptGenerationClass-»
		    /**
		     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_GET_GENERATION", generationConceptNameSingular)»
		     *
		     * @generated
		     */
		    «overrideAnnotationForPublishedMethodImplementation()-»
		    public «interfaceName» «method(methodNameGetProductComponentGeneration, Calendar(), varNameEffectiveDate)»
		    «IF genInterface()»;«ELSE-»
		    {
		        return («interfaceName»)«getRepository()».«getProductComponentGeneration("getId()", varNameEffectiveDate)»;
		    }
		    «ENDIF»
«ENDDEFINE»

«REM» The content of the method is always the same (use currentType). The methodName is derived from different types «ENDREM»
«DEFINE createPolicyCmpt(XProductCmptClass currentType) FOR XPolicyCmptClass»
	«IF currentType.isGenerateMethodCreatePolicyCmpt(this)-»
	    /**
	     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_CREATE_POLICY_CMPT", name)»
		 *
	     * @generated
	     */
	     «overrideAnnotationForPublishedMethodOrIf(!genInterface(), this.productCmptNode != currentType)-»
	    public «publishedInterfaceName» «method(methodNameCreatePolicyCmpt)»
	    «IF genInterface()»;«ELSE-»
	    {
	     «currentType.policyImplClassName» policy = new «currentType.policyImplClassName»(this);
	        policy.«initialize()»;
	        return policy;
	    }
		«ENDIF»
    «ENDIF»
«ENDDEFINE»

