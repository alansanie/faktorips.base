«IMPORT org::faktorips::devtools::stdbuilder»
«IMPORT org::faktorips::devtools::core::builder::naming»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::template»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmpt::model»
«IMPORT org::faktorips::devtools::stdbuilder::xpand::policycmpt::model»

«IMPORT org::faktorips::devtools::stdbuilder::xpand::productcmptbuilder::template»

«EXTENSION org::faktorips::devtools::stdbuilder::xpand::template::CommonGeneratorExtensions»

«DEFINE main FOR XProductCmptGenerationClass-»
	«FILE getFileName(BuilderAspect::IMPLEMENTATION) -»
	package «getPackageName(BuilderAspect::IMPLEMENTATION)»;

		«EXPAND CommonDefinitions::ImportBlock FOREACH context.imports ONFILECLOSE»
	
		/**
		«IF generatePublishedInterfaces-»
		 * «localizedJDoc("CLASS", interfaceName)»
		«ELSE-»
		 * «localizedJDocOrDescription("CLASS_NO_INTERFACE", generationConceptNameSingular, productCmptClassNode.name, description)»
		«ENDIF-»
		«IF !productCmptType.changingOverTime-»
		 * «localizedJDoc("DEPRECATED_CLASS", generationConceptNamePlural)»
		«ENDIF-»
		 * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
		 * @generated
		 */
		«IF !productCmptType.changingOverTime-»
		 @Deprecated
		«ENDIF-»
		public «abstract()» class «implClassName» extends «superclassName-» «EXPAND CommonDefinitions::implementedInterfaces-»
		 {
		 
			«EXPAND ProductAssociation::privateConstants FOREACH associations-»
		 
		 	«FOREACH attributes AS this-»
		 		«IF !generatePublishedInterfaces || !published -»
			 		«EXPAND ProductAttribute::constantForPropertyName-»
			 	«ENDIF-»
		 	«ENDFOREACH-»
		 
			«EXPAND ProductAttribute::memberField FOREACH attributes-»

			«EXPAND DefaultAndAllowedValues::defaultAndAllowedValuesFields FOREACH configuredAttributes-»

			«EXPAND ProductAssociation::field FOREACH associations-»
			
			«EXPAND TableUsages::propertyField FOREACH tables»
			
			«EXPAND TableUsages::memberField FOREACH tables»
			
		    /**
		     * «localizedJDoc("CONSTRUCTOR", getSimpleName(BuilderAspect::IMPLEMENTATION))»
		     * «getAnnotations(AnnotatedJavaElementType::ELEMENT_JAVA_DOC)»
		     * @generated
		     */
			public «method(implClassName, productCmptClassNode.implClassName, "productCmpt")» {
				super(productCmpt);
				«EXPAND ProductAttribute::setDefaultValue FOREACH attributesInclOverwritten-»
			}

			«FOREACH attributesInclOverwritten AS this-»
				«IF generateAbstractGetter-»
					«EXPAND ProductAttribute::abstractGetter-»
				«ENDIF»
			«ENDFOREACH»

			«EXPAND ProductAttribute::getterSetter FOREACH attributes»

			«EXPAND DefaultAndAllowedValues::getter FOREACH configuredAttributes-»

			«EXPAND ProductAssociation::getterSetterAdder FOREACH associations»
			
			«EXPAND DerivedUnionAssociation::methodsForDerivedUnion(this) FOREACH subsettedDerivedUnions»

			«FOREACH methods AS this-»
				«IF changingOverTime-»
					«IF !formulaSignature-»
						«EXPAND Methods::method-»
					«ELSE-»
						«EXPAND Methods::formulaMethod-»
					«ENDIF-»
				«ENDIF-»
			«ENDFOREACH-»

			«EXPAND getProductCmpt FOR productCmptClassNode-»
			
	    	/**
	     	* «inheritDoc()»
	     	* 
	     	* @generated
	     	*/
	    	@Override
	    	protected void «doInitPropertiesFromXml(Map("String", Element()) + " configMap")» {
		        super.«doInitPropertiesFromXml("configMap")»;
	        	«EXPAND ProductAttribute::initFromXmlMethodCall FOREACH attributes-»
	    	    «EXPAND DefaultAndAllowedValues::initFromXmlMethodCall FOREACH configuredAttributes-»
	    	}
	    	
			«EXPAND ProductAttribute::initFromXmlMethod FOREACH attributes-»
			«EXPAND DefaultAndAllowedValues::initFromXmlMethod FOREACH configuredAttributes-»
			
			«IF containsNotDerivedOrConstrainingAssociations»
			    /**
			     * @generated
			     */
	    		@Override
			    protected void «doInitReferencesFromXml(Map("String", List_(Element())) + " elementsMap")» {
			        super.«doInitReferencesFromXml("elementsMap")»;
			        «EXPAND ProductAssociation::doInitFromXmlMethodCall FOREACH associations-»
			    }
			«ENDIF»

			«EXPAND ProductAssociation::doInitFromXmlMethod FOREACH associations-»

			«IF containsTables-»
			    /**
			     * @generated
			     */
			    @Override
			    protected void «doInitTableUsagesFromXml(Map("String", Element()) + " tableUsageMap")» {
			        super.«doInitTableUsagesFromXml("tableUsageMap")»;
			        «EXPAND TableUsages::doInitFromXmlMethodCall FOREACH tables-»
			    }
			«ENDIF»

	        «EXPAND TableUsages::doInitFromXmlMethod FOREACH tables-»
		
			«EXPAND ProductCommons::writeToXmlMethods-»
			
			«EXPAND createPolicyCmpt(productCmptClassNode) FOREACH policyTypeClassHierarchy»

			«IF generateMethodGenericCreatePolicyComponent»
			    /**
			     * «inheritDoc()»
			     * 
			     * @generated
			     */
	    		@Override
			    public «policyInterfaceName» «createPolicyComponent()» {
			    	«IF !configurationForPolicyCmptType-»
			    		return null;
			    	«ELSE-»
			        	return «policyCmptClass.methodNameCreatePolicyCmpt»();
			        «ENDIF-»
			    }
		    «ENDIF»
	
			«EXPAND ProductAssociation::getLinkMethods»
			
			«EXPAND TableUsages::getterAndSetter FOREACH tables»
			
			«REM»«IF generateProductBuilder && !abstract-»
				«EXPAND ProductCmptGenCreateBuilder::builder FOR productGenBuilderModelNode-»
			«ENDIF-»«ENDREM»
	}
	«ENDFILE»
«ENDDEFINE»

«DEFINE getProductCmpt FOR XProductCmptClass-»
	    /**
	     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_GET_PRODUCTCMPT_IN_GEN", name, generationConceptNameSingular)»
		 *
	     * @generated
	     */
	    «overrideAnnotationForPublishedMethodImplementation()-»
	    public «interfaceName» «method(methodNameGetProductCmpt)»
	    «IF genInterface()»;«ELSE-»
	    {
	        return («interfaceName»)«getProductComponent()»;
	    }
	    «ENDIF»
«ENDDEFINE»

«REM» The content of the method is always the same (use currentType). The methodName is derived from different types «ENDREM»
«REM» TODO may use covariant return type«ENDREM»
«DEFINE createPolicyCmpt(XProductCmptClass currentType) FOR XPolicyCmptClass»
	«IF currentType.isGenerateMethodCreatePolicyCmpt(this)-»
	    /**
	     * «inheritDocOrJavaDocIf(genInterface(), "METHOD_CREATE_POLICY_CMPT_IN_GEN")»
		 *
	     * @generated
	     */
	     «overrideAnnotationForPublishedMethodOrIf(!genInterface(), this.productCmptNode != currentType)-»
	    public «getClassName(genInterface())» «method(methodNameCreatePolicyCmpt)»
	    «IF genInterface()»;«ELSE-»
	    {
	        «currentType.policyImplClassName» policy = new «currentType.policyImplClassName»(«currentType.methodNameGetProductCmpt»());
	      «IF currentType.changingOverTime-»
	        policy.«setProductCmptGeneration("this")»;
	      «ENDIF-» 
	        policy.«initialize()»;
	        return policy;
	    }
	    «ENDIF-»
    «ENDIF-»
«ENDDEFINE»
