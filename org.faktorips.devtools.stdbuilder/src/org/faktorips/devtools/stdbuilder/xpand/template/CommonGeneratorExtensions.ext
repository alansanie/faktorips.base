import org::faktorips::devtools::stdbuilder::xpand::model;
import org::faktorips::devtools::stdbuilder::xpand::policycmpt::model;

extension org::faktorips::devtools::stdbuilder::xpand::template::MethodNames reexport;

boolean genInterface() : GLOBALVAR generateInterface;

String camelCaseToUnderscore(String s) :
	JAVA org.faktorips.util.StringUtil.camelCaseToUnderscore(java.lang.String); 

// Use this function for methods that overrides another method (no interface method) on a given condition.
// Returns the override annotation if the given condition is true. 
overrideAnnotationIf(AbstractGeneratorModelNode this, boolean condition) :
	if condition then "@Override";

// Use this function for published methods. i.e. methods that are defined in a published interface.
// Returns the @Override annotation if published interfaces are beeing generated
overrideAnnotationForPublishedMethod(AbstractGeneratorModelNode this) :
	if generatePublishedInterfaces then "@Override";

// Use this function for published methods. i.e. methods that are defined in a published interface.
// Returns the @Override annotation if the condition is true and at the same time published interfaces are beeing generated
overrideAnnotationForPublishedMethodImplementation(AbstractGeneratorModelNode this) :
	if (!genInterface() && generatePublishedInterfaces) then "@Override";

// Use this function for published methods that require an override in a special condition. i.e. methods 
// that are defined in a published interface (if generated) but may also be overridden in subclasses. Returns the 
// @Override annotation if published interfaces are beeing generated or if the condition is true .
overrideAnnotationForPublishedMethodOrIf(AbstractGeneratorModelNode this, boolean condition) :
	if (generatePublishedInterfaces|| condition) then "@Override";

// Use this function for potentially published methods that require an override in a special condition. i.e. methods 
// that are defined in a published interface (if generated) but may also be overridden in subclasses. Returns the 
// @Override annotation if the first parameter (isPublished) is true and at the same time published interfaces are beeing generated
// or if the condition is true.
overrideAnnotationForPublishedMethodOrIf(AbstractGeneratorModelNode this, boolean isPublished , boolean condition) :
	if (generatePublishedInterfaces && isPublished
		 || condition ) then "@Override";

overrideAnnotationForPublishedMethodImplementationOr(AbstractGeneratorModelNode this, boolean condition) :
	overrideAnnotationIf((generatePublishedInterfaces && !genInterface()) || condition);

overrideAnnotationForConstainedAssociation(XAssociation this) :
	overrideAnnotationForPublishedMethodImplementationOr(this, constrain);

// User this function for attribute methods (e.g. getter, setter).
// Will return the @Override annotation if the attribute overwrites an attribute in a supertype.
// If the attribute does not override another attribute, the boolean parameter specifies wether the attribute
// is publishe
overrideAnnotationForAttribute(XAttribute this) :
	overrideAnnotationForPublishedMethodOrIf(published, overwrite);
	
// Use this function if the method in question is generated for all generated classes and subclasses always 
// override their super class' implementation. The method in question should not be an interface method. 
// Returns the @Override annotation if the given XPolicyCmptClass has a superclass.
// Returns nothing in all other cases.
overrideAnnotationIfHasSuperclass(XType this) :
	if hasSupertype() then "@Override";

inheritDoc() :
	"{@inheritDoc}";

inheritDocOrText(AbstractGeneratorModelNode this, String text):
	inheritDocOrTextIf(false, text);

inheritDocOrTextIf(AbstractGeneratorModelNode this, boolean generateInterface, String text):
	(generatePublishedInterfaces && !generateInterface)?inheritDoc():text;

inheritDocOrJavaDoc(AbstractGeneratorModelNode this, String key):
	inheritDocOrJavaDocIf(false, key);

inheritDocOrJavaDoc(AbstractGeneratorModelNode this, String key, String param):
	inheritDocOrJavaDocIf(false, key, param);
	
inheritDocOrJavaDoc(AbstractGeneratorModelNode this, String key, String param1, String param2):
	inheritDocOrJavaDocIf(false, key, param1, param2);

inheritDocOrJavaDoc(AbstractGeneratorModelNode this, String key, String param1, String param2, String param3):
	inheritDocOrJavaDocIf(false, key, param1, param2, param3);

inheritDocOrJavaDocIf(AbstractGeneratorModelNode this, boolean generatesInterface, String key):
	(generatePublishedInterfaces && !generatesInterface)?inheritDoc():localizedJDoc(key);

inheritDocOrJavaDocIf(AbstractGeneratorModelNode this, boolean generatesInterface, String key, String param):
	(generatePublishedInterfaces && !generatesInterface)?inheritDoc():localizedJDoc(key, param);

inheritDocOrJavaDocIf(AbstractGeneratorModelNode this, boolean generatesInterface, String key, String param1, String param2):
	(generatePublishedInterfaces && !generatesInterface)?inheritDoc():localizedJDoc(key, param1, param2);
	
inheritDocOrJavaDocIf(AbstractGeneratorModelNode this, boolean generatesInterface, String key, String param1, String param2,String param3):
	(generatePublishedInterfaces && !generatesInterface)?inheritDoc():localizedJDoc(key, param1, param2, param3);
	
localizedJDocOrDescription(AbstractGeneratorModelNode this, String key, String param, String description):
	if description.length > 0 then description else localizedJDoc(key, param);

localizedJDocOrDescription(AbstractGeneratorModelNode this, String key, String param1, String param2, String description):
	if description.length > 0 then description else localizedJDoc(key, param1, param2);
	
abstract(XType this) :
	if abstract && !genInterface() then "abstract";

isPolicyCmptClass(XClass xClass) :
	if XPolicyCmptClass.isInstance(xClass) then true else false;

castToImplementation(AbstractGeneratorModelNode this, String className) :
	if generatePublishedInterfaces then "(" + className + ")" else "";
	
castToImplementation(AbstractGeneratorModelNode this, String className, String varName) :
	if generatePublishedInterfaces then "((" + className + ")" + varName + ")" else varName;

castFromTo(AbstractGeneratorModelNode this, String currentClassName, String castClassName) :
	if currentClassName != castClassName then "(" + castClassName + ")";
	
castFromTo(AbstractGeneratorModelNode this, String currentClassName, String castClassName, String varName) :
	if currentClassName != castClassName then "((" + castClassName + ")" + varName + ")" else varName;
	